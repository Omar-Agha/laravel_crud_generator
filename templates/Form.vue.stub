<template>

    <VCard>
        <VCardTitle>
            <span v-if="!isEdit" class="headline">{{vueTranslate "Create" }}</span>
            <span v-else class="headline">{{vueTranslate "UpdateRecord" }}</span>
        </VCardTitle>

        <VForm @submit.prevent>


            <VCardText>
            
            {{#each form}}
            	{{#ifEquals this.type 'string'}}<VTextField {{/ifEquals}}
            	{{#ifEquals this.type 'date'}}<VDateInput {{/ifEquals}}
				{{#ifEquals this.type 'file'}}<VFileInput {{/ifEquals}}
                	v-model="recordForm.{{#ifEquals this.type 'file'}}uploaded_{{/ifEquals}}{{this.name}}" :label="translate('{{pascalCase this.name}}')"
                    :error-messages="appPage.props.errors.{{#ifEquals this.type 'file'}}uploaded_{{/ifEquals}}{{this.name}} || v$.{{#ifEquals this.type 'file'}}uploaded_{{/ifEquals}}{{this.name}}.$errors.map(e => e.$message)" />
			{{/each}}
               
            </VCardText>
            <VCardActions>

                <VBtn type="submit" color="primary" @click="saveRecord">{{{surroundWithBrackets "isEdit ? translate('Update') : translate('Create')" }}}
                </VBtn>
                <VBtn @click="closeDialog">{{vueTranslate 'Cancel' }}</VBtn>
            </VCardActions>
        </VForm>

    </VCard>




    <ConfirmationAlert ref="confirmationAlert" />
    <SnackMessage ref="snackMessage" />
    <PageLoader ref="pageLoader" />
</template>

<script setup lang="ts">

import { ref, reactive, watch } from 'vue';
import { VBtn, VCard, VCardActions, VCardText, VCardTitle, VFileInput, VForm, VTextField } from 'vuetify/lib/components/index.mjs';

import { usePage } from '@inertiajs/vue3';
import { getRecordById, initialCreateForm, storeFormRules, storeRecordApi, updateRecordApi } from './core';
import { useVuelidate } from '@vuelidate/core'
import ConfirmationAlert from '@/Components/ConfirmationDialog.vue';
import SnackMessage from '@/Components/SnackMessage.vue';
import PageLoader from '@/Components/PageLoader.vue';
import { computed } from 'vue';
import { translate } from '@/utils/translation';
import { VDateInput } from 'vuetify/lib/labs/components.mjs';

const goo = ref();

const snackMessage = ref();

const pageLoader = ref(false)

const isEdit = computed(() => {
    return props.editingRecordId != null
});

const appPage = usePage();


const initialFormState = initialCreateForm;

const recordForm = reactive({
    ...initialFormState,
})


const emit = defineEmits(['close-dialog', 'save-success']);
const props = defineProps({
    editingRecordId: Number
})

const v$ = useVuelidate(storeFormRules, recordForm)

function clearForm() {
    v$.value.$reset()
    for (const [key, value] of Object.entries(initialFormState)) {
        recordForm[key] = value
    }
    for (const [key, value] of Object.entries(appPage.props.errors)) {
        appPage.props.errors[key] = "";
    }


}



const saveRecord = async () => {

    console.log(v$.value.$errors);
    var isValid = await v$.value.$validate();
    if (!isValid) return;


    if (isEdit.value) {
        updateRecord();
    }
    else {
        createRecord();
    }



};

const closeDialog = () => {
    clearForm();

    emit('close-dialog')
};

const createRecord = () => {

    storeRecordApi(recordForm, (response) => {

        emit('save-success');
        clearForm()
    }, onRequestErrorHandler, onBeforePageRequestHandler, onAfterPageRequestHandler)

}


const updateRecord = () => {

    updateRecordApi(props.editingRecordId, recordForm, (response) => {
        emit('save-success');
        clearForm()
    }, onRequestErrorHandler, onBeforePageRequestHandler, onAfterPageRequestHandler)

}


const onRequestErrorHandler = (err) => {

    snackMessage.value.open(err ?? "Some Error Occurred", 'error')

}

const onBeforeListRequestHandler = () => {
    isListLoading.value = true;

}
const onAfterListRequestHandler = () => {
    isListLoading.value = false;
}

const onBeforePageRequestHandler = () => {
    pageLoader.value = true;

}
const onAfterPageRequestHandler = () => {
    pageLoader.value = false;
}




watch(() => props.editingRecordId, (newValue, oldValue) => {
    clearForm();

    if (newValue != null) {

        getRecordById(newValue, (data) => {
            Object.assign(recordForm, data.data)

        })
    }

}, { immediate: true, deep: true });

</script>
